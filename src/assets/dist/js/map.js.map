{"version":3,"file":"map.js","sources":["../../map/src/js/table.js","../../map/src/js/locations.js"],"sourcesContent":["function initTableSorting() {\n    const table = document.querySelector(\"#overlaps\");\n    if (!table) {return;}\n\n    const headers = table.querySelectorAll(\"thead th\");\n    headers.forEach(header => {\n        header.addEventListener(\"click\", () => {\n            const tableBody = table.querySelector(\"tbody\");\n            const rows = Array.from(tableBody.querySelectorAll(\"tr\"));\n            const index = Array.from(headers).indexOf(header);\n            const isAscending = header.classList.contains(\"asc\");\n\n            // Remove sorting classes and hide icons for all headers\n            headers.forEach(h => {\n                h.classList.remove(\"asc\", \"desc\");\n                const icon = h.querySelector(\".sort-icon\");\n                if (icon) {\n                    icon.style.display = \"none\"; // Hide all sort icons\n                }\n            });\n\n            // Sort rows based on the clicked column\n            rows.sort((a, b) => {\n                const aText = a.children[index].textContent.trim();\n                const bText = b.children[index].textContent.trim();\n\n                return isAscending\n                    ? aText.localeCompare(bText)\n                    : bText.localeCompare(aText);\n            });\n\n            // Append sorted rows back to the table body\n            rows.forEach(row => tableBody.appendChild(row));\n\n            // Toggle sorting class and show the active sort icon\n            header.classList.toggle(\"asc\", !isAscending);\n            header.classList.toggle(\"desc\", isAscending);\n            // Get the sort icon for the active header\n            let sortIcon = header.querySelector(\".sort-icon\");\n            sortIcon.style.display = \"inline\"; // Show the active sort icon\n        });\n    });\n}\n\nexport default initTableSorting;\n","/* global google */\n\nimport initTableSorting from \"./table\";\n\n(function () {\n    // Wait for the Google Maps API to be loaded\n    const advertiseColors = {\n        true: {\n            hex: \"#15803d\",\n            tw: \"text-green-700\" // green-700\n        }, // green-700\n        false: {\n            hex: \"#be123c\",\n            tw: \"text-red-700\" // red-700\n        },\n    };\n\n    // Function to flash an element\n    function flashElement(element) {\n        console.log(\"Flashing element:\", element);\n        element.classList.add(\"flash\");\n        setTimeout(() => {\n            element.classList.remove(\"flash\");\n        }, 1000); // Flash duration\n    }\n\n    // Flash the circle\n    function animatePulse(circle) {\n        let growing = true;\n        const maxScaleFactor = 1.05; // 5% increase from initial radius\n        const minScaleFactor = 0.95; // 5% decrease from initial radius\n        let pulseCount = 0;\n        const maxPulses = 2; // Limit to 3 pulses\n        const baseRadius = circle.getRadius();\n        const pulseDuration = 1500; // 1.5s per pulse\n        const initialBackgroundColor = circle.get(\"fillColor\");\n\n        circle.setOptions({\n            zIndex: 1000, // Ensure the circle is on top\n        });\n\n        function pulse() {\n            if (pulseCount >= maxPulses) {\n                return;\n            } // Stop after 3 pulses\n\n            let currentRadius = circle.getRadius();\n            let change = currentRadius * 0.0085; // Â±1% of the current radius\n\n            if (growing) {\n                currentRadius += change;\n                if (currentRadius >= baseRadius * maxScaleFactor) {\n                    growing = false;\n                }\n            } else {\n                currentRadius -= change;\n                if (currentRadius <= baseRadius * minScaleFactor) {\n                    growing = true;\n                    pulseCount++; // Increment pulse count after a full cycle\n                }\n            }\n\n            // Update the circle's radius and opacity\n            circle.setRadius(currentRadius);\n\n            // Smooth the animation by spacing out frames\n            if (pulseCount < maxPulses) {\n                setTimeout(pulse, pulseDuration / 60); // Slower, smoother animation\n            }\n        }\n\n        pulse(); // Start the pulse\n    }\n\n    function initMap() {\n        console.log(\"Initializing map...\");\n\n        const mapElement = document.getElementById(\"map\");\n        const loadingIndicator = document.getElementById(\"loading-indicator\");\n\n        // Create a map centered to show the lower 48 states of the USA\n        const map = new google.maps.Map(document.getElementById(\"map\"), {\n            center: {lat: 37.0902, lng: -95.7129}, // Approximate center of the contiguous USA\n            zoom: 4 // Zoom level to show the lower 48 states\n        });\n\n        // Array to store all circles\n        const circles = [];\n        const bounds = new google.maps.LatLngBounds();\n\n        // Create a single info window instance\n        const infoWindow = new google.maps.InfoWindow();\n\n        // if mapElement has a data attribute for fetch-locations-url (elements-api can use this).\n        // Use leadflex plugin endpoint if not provided.\n        const fetchLocationsUrl = mapElement.dataset.fetchLocationsUrl ?? \"/leadflex/map/locations\";\n\n        // Fetch location data\n        fetch(fetchLocationsUrl)\n            .then(response => {\n                console.log(\"Fetching locations...\");\n                return response.json();\n            })\n            .then(response => {\n                console.log(\"Locations fetched:\", response);\n                const locations = response.data;\n\n                // Hide the loading indicator\n                if (loadingIndicator) {\n                    loadingIndicator.style.display = \"none\";\n                }\n\n                locations.forEach(job => {\n                    // exit early if coords are not lat, lng\n                    if (!job.location.coords.lat || !job.location.coords.lng) {\n                        console.warn(\"Invalid coordinates for job:\", job.title);\n                        return;\n                    }\n\n                    console.log(\"Creating circle for location:\", job.title);\n                    // Create a circle for each location\n                    const circle = new google.maps.Circle({\n                        strokeColor: job.circle.strokeColor ?? advertiseColors[job.advertiseJob].hex,\n                        strokeOpacity: job.circle.strokeOpacity ?? 0.8,\n                        strokeWeight: job.circle.strokeWeight ?? 2,\n                        fillColor: job.circle.fillColor ?? advertiseColors[job.advertiseJob].hex,\n                        fillOpacity: job.circle.fillOpacity ?? 0.6,\n                        map: map,\n                        center: job.location.coords,\n                        radius: job.hiringRadius ?? 40\n                    });\n\n                    // Extend the bounds to include this circle's center\n                    bounds.extend(job.location.coords);\n\n                    // Store the circle and the job data\n                    circles.push({circle, id: job.id, title: job.title, data: job});\n\n                    // Add a click event listener to the circle\n                    circle.addListener(\"click\", (event) => {\n                        console.log(`Circle for ${job.title} clicked at:`, event.latLng);\n\n                        const clickedLocation = event.latLng;\n                        const overlappingJobs = [];\n\n                        // Check for overlapping circles\n                        circles.forEach(({circle, data}) => {\n                            const circleCenter = circle.getCenter();\n                            const distance = google.maps.geometry.spherical.computeDistanceBetween(circleCenter, clickedLocation);\n\n                            // console.log(`Checking circle for ${data.title}: Distance = ${distance}, Radius = ${circle.getRadius()}`);\n\n                            if (distance <= circle.getRadius()) {\n                                console.log(`Circle for ${data.title} overlaps with click location.`);\n                                overlappingJobs.push(data);\n                            }\n                        });\n\n                        if (overlappingJobs.length > 0) {\n                            console.log(\"Overlapping jobs found:\", overlappingJobs);\n\n                            // Populate the table with overlapping jobs\n                            const tbody = document.querySelector(\"#overlaps tbody\");\n                            tbody.innerHTML = \"\"; // Clear existing rows\n\n                            let infoWindowContent = \"<div class='info-window-content'>\";\n                            overlappingJobs.forEach((job, index) => {\n                                // Get the icons html related to advertiseJob or not\n                                let svgId = (job.advertiseJob ? \"check\" : \"x\") + \"-square-fill\";\n                                // built this html with javascript functions\n                                let advertiseSvg = document.createElement(\"svg\");\n                                advertiseSvg.className = `h-4 w-4 mx-2 ${advertiseColors[job.advertiseJob].tw}`;\n                                let useElement = document.createElement(\"use\");\n                                useElement.setAttribute(\"xlink:href\", `#${svgId}`);\n                                advertiseSvg.appendChild(useElement);\n\n                                // Create a row for each job\n                                const row = document.createElement(\"tr\");\n                                row.className = \"border-t border-gray-300 job-info\"; // Add Tailwind classes for row borders\n                                row.dataset.job = JSON.stringify(job);\n                                row.dataset.jobId = job.id;\n                                let tableDataClasses = \"px-4 py-2 border-b border-gray-300\";\n\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">${job.title}</td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">${job.company.name}</td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">${job.types.driver}</td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">${job.types.trailer}</td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">${job.types.job}</td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">${job.location.city}</td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">${job.location.state}</td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">${Math.round(job.hiringRadius / 1609.34)}</td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">${job.assignedCampaigns}</td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">\n                                    <div class=\"flex items-center justify-center\" data-modal-triggers>\n                                        <svg class=\"h-4 w-4 mx-2 ${job.advertiseJob ? advertiseColors[job.advertiseJob].tw : \"\"}\" data-advertise=true>\n                                            <use xlink:href=\"#check-square-fill\"></use>\n                                        </svg>\n                                        <svg class=\"h-4 w-4 mx-2 ${!job.advertiseJob ? advertiseColors[job.advertiseJob].tw : \"\"}\" data-advertise=false>\n                                            <use xlink:href=\"#x-square-fill\"></use>\n                                        </svg>\n                                    </div>\n                                  </td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">\n                                    <a href=\"${job.url}\" target=\"_blank\" class=\"text-blue-500 hover:underline\">View Job</a> \n                                  </td>`;\n                                row.innerHTML += `<td class=\"${tableDataClasses}\">\n                                    <span class=\"cursor-pointer text-blue-500 hover:underline\">Highlight</span> \n                                  </td>`;\n                                tbody.appendChild(row);\n\n                                advertiseSvg.className = `h-2 w-2 mr-1 ${advertiseColors[job.advertiseJob].tw}`;\n                                // Populate the info window with the job info\n                                infoWindowContent += `<div class='job-info py-2' data-job-id='${job.id}'>`;\n                                infoWindowContent += `<a class=\"underline blue-700\" href='${job.url}' target='_blank'>`;\n                                infoWindowContent += `<h3><span class=\"flex items-center\">${advertiseSvg.outerHTML}${job.title}</span></h3>`;\n                                infoWindowContent += \"</a>\";\n                                infoWindowContent += \"<ul class='list-disc pl-6'>\";\n                                // using array of jobs.additionalInfo to populate the info window\n                                infoWindowContent += `<li><strong>Company Name:</strong> ${job.company.name}</li>`;\n                                infoWindowContent += `<li><strong>Driver Type:</strong> ${job.types.driver}</li>`;\n                                infoWindowContent += `<li><strong>Trailer Type:</strong> ${job.types.trailer}</li>`;\n                                infoWindowContent += `<li><strong>Job Type:</strong> ${job.types.job}</li>`;\n                                infoWindowContent += `<li><strong>City:</strong> ${job.location.city}</li>`;\n                                infoWindowContent += `<li><strong>Assigned Campaign:</strong> ${job.assignedCampaigns ? job.assignedCampaigns : \"<i>none</i>\"}</li>`;\n                                infoWindowContent += \"</ul>\";\n                                infoWindowContent += \"</div>\";\n\n                                // Add a separator between jobs if there is more than one\n                                if (index < overlappingJobs.length - 1) {\n                                    infoWindowContent += \"<hr>\";\n                                }\n                            });\n                            infoWindowContent += \"</div>\";\n\n                            // Close the current info window before opening a new one\n                            infoWindow.close();\n\n                            // Set the content of the info window to the list of titles\n                            infoWindow.setContent(infoWindowContent);\n                            infoWindow.setPosition(clickedLocation);\n                            infoWindow.open(map);\n\n\n                            google.maps.event.addListenerOnce(infoWindow, \"domready\", () => {\n                                // Focus on the close button when the info window is opened\n                                const closeButton = document.querySelector(\".gm-ui-hover-effect\");\n                                if (closeButton) {\n                                    closeButton.focus();\n                                }\n\n                                document.querySelectorAll(\".job-info\").forEach(container => {\n                                    console.log(container);\n                                    container.addEventListener(\"click\", (e) => {\n                                        // parse to int\n                                        const jobId = parseInt(container.getAttribute(\"data-job-id\"));\n                                        // exit early if jobId is not a number\n                                        if (isNaN(jobId)) {\n                                            console.error(\"Invalid jobId:\", jobId);\n                                            return;\n                                        }\n\n                                        console.log(\"Job info clicked:\", jobId);\n\n                                        // Flash the corresponding circle\n                                        const circleData = circles.find(c => c.data.id === jobId);\n                                        if (circleData) {\n                                            animatePulse(circleData.circle);\n                                        } else {\n                                            console.error(\"Circle not found for job:\", jobId);\n                                        }\n\n                                        // Flash the corresponding table row\n                                        const row = document.querySelector(`tr[data-job-id=\"${jobId}\"]`);\n                                        if (row) {\n                                            flashElement(row);\n                                        } else {\n                                            console.error(\"Row not found for job:\", jobId);\n                                        }\n\n                                        //  Flash the row in the info window // info-window-content\n                                        const infoWindow = document.querySelector(`.info-window-content .job-info[data-job-id=\"${jobId}\"]`);\n                                        if (infoWindow) {\n                                            flashElement(infoWindow);\n                                        } else {\n                                            console.error(\"Info window not found\");\n                                        }\n                                    });\n                                });\n                            });\n\n                            // Initialize table sorting after populating the table\n                            initTableSorting();\n                        } else {\n                            console.log(\"No overlapping circles found.\");\n                        }\n                    });\n                });\n\n                // Adjust the map to fit all the circles\n                map.fitBounds(bounds);\n            })\n            .catch(error => {\n                console.error(\"Error fetching locations:\", error);\n\n                // Hide the loading indicator even if there's an error\n                if (loadingIndicator) {\n                    loadingIndicator.style.display = \"none\";\n                }\n            });\n    }\n\n    // Initialize the map when the window loads\n    window.onload = initMap;\n})();\n"],"names":["initTableSorting","table","headers","header","tableBody","rows","index","isAscending","h","icon","a","b","aText","bText","row","sortIcon","advertiseColors","flashElement","element","animatePulse","circle","growing","maxScaleFactor","minScaleFactor","pulseCount","maxPulses","baseRadius","pulseDuration","pulse","currentRadius","change","initMap","mapElement","loadingIndicator","map","circles","bounds","infoWindow","fetchLocationsUrl","response","locations","job","event","clickedLocation","overlappingJobs","data","circleCenter","tbody","infoWindowContent","svgId","advertiseSvg","useElement","tableDataClasses","closeButton","container","e","jobId","circleData","c","error"],"mappings":"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"}